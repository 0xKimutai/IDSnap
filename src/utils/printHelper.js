/**
 * Print helper utilities for generating printable documents from ID card data
 * Provides functions to format and print extracted data
 */

import RNPrint from 'react-native-print';

/**
 * Print configuration options
 */
export const PRINT_CONFIG = {
  orientation: 'portrait',
  isLandscape: false,
  jobName: 'ID Card Data',
};

/**
 * Generate HTML content for printing ID card data
 * @param {Object} data - Extracted ID card data
 * @param {string} imageUri - URI of the scanned image
 * @param {Object} options - Print formatting options
 * @returns {string} - HTML content for printing
 */
export const generatePrintHTML = (data, imageUri = null, options = {}) => {
  const {
    includeImage = true,
    includeTimestamp = true,
    title = 'ID Card Information',
    companyName = 'IDSnap Scanner',
  } = options;

  const timestamp = new Date().toLocaleString();
  
  const html = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>${title}</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          margin: 20px;
          line-height: 1.6;
          color: #333;
        }
        .header {
          text-align: center;
          border-bottom: 2px solid #2196F3;
          padding-bottom: 20px;
          margin-bottom: 30px;
        }
        .header h1 {
          color: #2196F3;
          margin: 0;
          font-size: 28px;
        }
        .header .company {
          color: #666;
          font-size: 14px;
          margin-top: 5px;
        }
        .content {
          display: flex;
          gap: 30px;
          margin-bottom: 30px;
        }
        .image-section {
          flex: 1;
          text-align: center;
        }
        .image-section img {
          max-width: 100%;
          height: auto;
          border: 1px solid #ddd;
          border-radius: 8px;
          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .data-section {
          flex: 2;
        }
        .field-group {
          margin-bottom: 20px;
        }
        .field-label {
          font-weight: bold;
          color: #2196F3;
          font-size: 14px;
          margin-bottom: 5px;
          text-transform: uppercase;
          letter-spacing: 0.5px;
        }
        .field-value {
          font-size: 16px;
          padding: 8px 12px;
          background-color: #f8f9fa;
          border: 1px solid #e9ecef;
          border-radius: 4px;
          min-height: 20px;
        }
        .field-value.empty {
          color: #999;
          font-style: italic;
        }
        .footer {
          border-top: 1px solid #ddd;
          padding-top: 20px;
          text-align: center;
          color: #666;
          font-size: 12px;
        }
        .timestamp {
          margin-top: 10px;
        }
        .quality-info {
          background-color: #e3f2fd;
          padding: 15px;
          border-radius: 8px;
          margin-bottom: 20px;
        }
        .quality-info h3 {
          margin: 0 0 10px 0;
          color: #1976d2;
        }
        @media print {
          body { margin: 0; }
          .content { flex-direction: column; }
          .image-section { margin-bottom: 20px; }
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>${title}</h1>
        <div class="company">${companyName}</div>
      </div>
      
      <div class="content">
        ${includeImage && imageUri ? `
          <div class="image-section">
            <h3>Scanned Image</h3>
            <img src="${imageUri}" alt="Scanned ID Card" />
          </div>
        ` : ''}
        
        <div class="data-section">
          <h3>Extracted Information</h3>
          ${generateFieldsHTML(data)}
        </div>
      </div>
      
      <div class="footer">
        <div>Generated by ${companyName}</div>
        ${includeTimestamp ? `<div class="timestamp">Scanned on: ${timestamp}</div>` : ''}
      </div>
    </body>
    </html>
  `;
  
  return html;
};

/**
 * Generate HTML for data fields
 * @param {Object} data - Data object
 * @returns {string} - HTML for fields
 */
const generateFieldsHTML = (data) => {
  const fieldLabels = {
    fullName: 'Full Name',
    firstName: 'First Name',
    lastName: 'Last Name',
    idNumber: 'ID Number',
    licenseNumber: 'License Number',
    passportNumber: 'Passport Number',
    studentId: 'Student ID',
    dateOfBirth: 'Date of Birth',
    gender: 'Gender',
    address: 'Address',
    nationality: 'Nationality',
    issueDate: 'Issue Date',
    expiryDate: 'Expiry Date',
    height: 'Height',
    weight: 'Weight',
    eyeColor: 'Eye Color',
    hairColor: 'Hair Color',
    phoneNumber: 'Phone Number',
    email: 'Email',
    postalCode: 'Postal Code',
  };
  
  let html = '';
  
  Object.entries(fieldLabels).forEach(([key, label]) => {
    const value = data[key];
    const displayValue = value || 'Not available';
    const isEmpty = !value;
    
    html += `
      <div class="field-group">
        <div class="field-label">${label}</div>
        <div class="field-value ${isEmpty ? 'empty' : ''}">${displayValue}</div>
      </div>
    `;
  });
  
  return html;
};

/**
 * Generate summary report HTML
 * @param {Object} data - Extracted data
 * @param {Object} qualityReport - Quality assessment report
 * @param {string} imageUri - Image URI
 * @returns {string} - HTML content
 */
export const generateSummaryReportHTML = (data, qualityReport, imageUri = null) => {
  const timestamp = new Date().toLocaleString();
  const { score, level, errors, warnings, completeness } = qualityReport;
  
  const html = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>ID Card Scan Report</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          margin: 20px;
          line-height: 1.6;
          color: #333;
        }
        .header {
          text-align: center;
          border-bottom: 2px solid #2196F3;
          padding-bottom: 20px;
          margin-bottom: 30px;
        }
        .quality-score {
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          color: white;
          padding: 20px;
          border-radius: 10px;
          text-align: center;
          margin-bottom: 30px;
        }
        .score-value {
          font-size: 48px;
          font-weight: bold;
          margin: 10px 0;
        }
        .score-level {
          font-size: 18px;
          opacity: 0.9;
        }
        .metrics {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
          gap: 20px;
          margin-bottom: 30px;
        }
        .metric {
          background: #f8f9fa;
          padding: 15px;
          border-radius: 8px;
          text-align: center;
        }
        .metric-value {
          font-size: 24px;
          font-weight: bold;
          color: #2196F3;
        }
        .metric-label {
          font-size: 12px;
          color: #666;
          text-transform: uppercase;
        }
        .issues {
          margin-bottom: 30px;
        }
        .issue-list {
          background: #fff3cd;
          border: 1px solid #ffeaa7;
          border-radius: 8px;
          padding: 15px;
          margin: 10px 0;
        }
        .error-list {
          background: #f8d7da;
          border: 1px solid #f5c6cb;
        }
        .issue-item {
          margin: 5px 0;
          padding-left: 20px;
          position: relative;
        }
        .issue-item:before {
          content: 'â€¢';
          position: absolute;
          left: 0;
          color: #dc3545;
        }
        .data-preview {
          background: #f8f9fa;
          border-radius: 8px;
          padding: 20px;
          margin-bottom: 20px;
        }
        .field-row {
          display: flex;
          justify-content: space-between;
          padding: 8px 0;
          border-bottom: 1px solid #e9ecef;
        }
        .field-label {
          font-weight: bold;
          color: #495057;
        }
        .field-value {
          color: #6c757d;
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>ID Card Scan Report</h1>
        <p>Comprehensive analysis of scanned ID card data</p>
      </div>
      
      <div class="quality-score">
        <div>Overall Quality Score</div>
        <div class="score-value">${Math.round(score * 100)}%</div>
        <div class="score-level">${level}</div>
      </div>
      
      <div class="metrics">
        <div class="metric">
          <div class="metric-value">${completeness.filledFields}</div>
          <div class="metric-label">Fields Extracted</div>
        </div>
        <div class="metric">
          <div class="metric-value">${Math.round(completeness.completenessScore * 100)}%</div>
          <div class="metric-label">Completeness</div>
        </div>
        <div class="metric">
          <div class="metric-value">${errors.length}</div>
          <div class="metric-label">Errors</div>
        </div>
        <div class="metric">
          <div class="metric-value">${warnings.length}</div>
          <div class="metric-label">Warnings</div>
        </div>
      </div>
      
      ${errors.length > 0 ? `
        <div class="issues">
          <h3>Errors Found</h3>
          <div class="issue-list error-list">
            ${errors.map(error => `<div class="issue-item">${error}</div>`).join('')}
          </div>
        </div>
      ` : ''}
      
      ${warnings.length > 0 ? `
        <div class="issues">
          <h3>Warnings</h3>
          <div class="issue-list">
            ${warnings.map(warning => `<div class="issue-item">${warning}</div>`).join('')}
          </div>
        </div>
      ` : ''}
      
      <div class="data-preview">
        <h3>Extracted Data Summary</h3>
        ${generateDataPreviewHTML(data)}
      </div>
      
      <div style="text-align: center; color: #666; font-size: 12px; margin-top: 30px;">
        Generated on ${timestamp} by IDSnap Scanner
      </div>
    </body>
    </html>
  `;
  
  return html;
};

/**
 * Generate data preview HTML for summary report
 * @param {Object} data - Data object
 * @returns {string} - HTML content
 */
const generateDataPreviewHTML = (data) => {
  const importantFields = ['fullName', 'idNumber', 'dateOfBirth', 'gender', 'address'];
  let html = '';
  
  importantFields.forEach(field => {
    const value = data[field];
    if (value) {
      const label = field.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase());
      html += `
        <div class="field-row">
          <span class="field-label">${label}:</span>
          <span class="field-value">${value}</span>
        </div>
      `;
    }
  });
  
  if (!html) {
    html = '<div style="text-align: center; color: #999;">No data extracted</div>';
  }
  
  return html;
};

/**
 * Print ID card data
 * @param {Object} data - Extracted data
 * @param {string} imageUri - Image URI
 * @param {Object} options - Print options
 * @returns {Promise} - Print result
 */
export const printIdCardData = async (data, imageUri = null, options = {}) => {
  try {
    const html = generatePrintHTML(data, imageUri, options);
    
    const printOptions = {
      html,
      ...PRINT_CONFIG,
      ...options.printConfig,
    };
    
    const result = await RNPrint.print(printOptions);
    return result;
  } catch (error) {
    console.error('Error printing ID card data:', error);
    throw new Error('Failed to print ID card data');
  }
};

/**
 * Print quality report
 * @param {Object} data - Extracted data
 * @param {Object} qualityReport - Quality report
 * @param {string} imageUri - Image URI
 * @param {Object} options - Print options
 * @returns {Promise} - Print result
 */
export const printQualityReport = async (data, qualityReport, imageUri = null, options = {}) => {
  try {
    const html = generateSummaryReportHTML(data, qualityReport, imageUri);
    
    const printOptions = {
      html,
      ...PRINT_CONFIG,
      jobName: 'ID Card Quality Report',
      ...options.printConfig,
    };
    
    const result = await RNPrint.print(printOptions);
    return result;
  } catch (error) {
    console.error('Error printing quality report:', error);
    throw new Error('Failed to print quality report');
  }
};

/**
 * Generate PDF from HTML content
 * @param {string} html - HTML content
 * @param {Object} options - PDF options
 * @returns {Promise<string>} - Path to generated PDF
 */
export const generatePDF = async (html, options = {}) => {
  try {
    const pdfOptions = {
      html,
      fileName: options.fileName || 'id-card-data',
      directory: options.directory || 'Documents',
      ...PRINT_CONFIG,
      ...options,
    };
    
    const result = await RNPrint.print(pdfOptions);
    return result;
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error('Failed to generate PDF');
  }
};

/**
 * Check if printing is available
 * @returns {Promise<boolean>} - Whether printing is available
 */
export const isPrintingAvailable = async () => {
  try {
    return await RNPrint.isAvailable();
  } catch (error) {
    console.error('Error checking print availability:', error);
    return false;
  }
};

/**
 * Format data for export
 * @param {Object} data - Data to format
 * @param {string} format - Export format ('json', 'csv', 'txt')
 * @returns {string} - Formatted data
 */
export const formatDataForExport = (data, format = 'json') => {
  switch (format.toLowerCase()) {
    case 'json':
      return JSON.stringify(data, null, 2);
      
    case 'csv':
      return formatAsCSV(data);
      
    case 'txt':
      return formatAsText(data);
      
    default:
      throw new Error(`Unsupported export format: ${format}`);
  }
};

/**
 * Format data as CSV
 * @param {Object} data - Data object
 * @returns {string} - CSV formatted string
 */
const formatAsCSV = (data) => {
  const headers = Object.keys(data);
  const values = Object.values(data);
  
  const csvHeaders = headers.join(',');
  const csvValues = values.map(value => 
    typeof value === 'string' && value.includes(',') 
      ? `"${value}"` 
      : value
  ).join(',');
  
  return `${csvHeaders}\n${csvValues}`;
};

/**
 * Format data as plain text
 * @param {Object} data - Data object
 * @returns {string} - Text formatted string
 */
const formatAsText = (data) => {
  const fieldLabels = {
    fullName: 'Full Name',
    firstName: 'First Name',
    lastName: 'Last Name',
    idNumber: 'ID Number',
    licenseNumber: 'License Number',
    passportNumber: 'Passport Number',
    dateOfBirth: 'Date of Birth',
    gender: 'Gender',
    address: 'Address',
    nationality: 'Nationality',
    issueDate: 'Issue Date',
    expiryDate: 'Expiry Date',
  };
  
  let text = 'ID CARD INFORMATION\n';
  text += '='.repeat(50) + '\n\n';
  
  Object.entries(data).forEach(([key, value]) => {
    const label = fieldLabels[key] || key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase());
    text += `${label}: ${value || 'N/A'}\n`;
  });
  
  text += '\n' + '='.repeat(50) + '\n';
  text += `Generated on: ${new Date().toLocaleString()}\n`;
  text += 'Generated by: IDSnap Scanner\n';
  
  return text;
};

export default {
  generatePrintHTML,
  generateSummaryReportHTML,
  printIdCardData,
  printQualityReport,
  generatePDF,
  isPrintingAvailable,
  formatDataForExport,
  PRINT_CONFIG,
};
